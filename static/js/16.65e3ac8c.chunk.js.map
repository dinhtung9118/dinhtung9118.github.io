{"version":3,"sources":["stores/UseApi/useApi.ts","pages/Schedules/ConsultationWorkingTime/style.ts","pages/Schedules/ConsultationWorkingTime/index.tsx"],"names":["useApi","query","deps","loader","useLoaderActions","useState","state","setState","useCallback","useEffect","push","then","useStyles","makeStyles","theme","root","paddingTop","spacing","background","palette","common","white","height","link","textDecoration","color","primary","main","SchedulesConsultationPage","useTheme","classes","history","useHistory","resourcesData","text","id","AccountStatus","ACTIVE","success","INACTIVE","disabled","React","Date","currentDate","setCurrentDate","startDay","endDay","schedules","mapped","setMapped","useAuthentication","active","setActive","data","setData","payload","doctorId","account","externalId","offset","limit","dataRs","repoDoctor","getConsultationWorkingTime","WorkingTime","toSchedule","map","s","start","startDate","getHours","end","endDate","resources","fieldName","instances","renderDetailSession","props","workingTime","appointmentData","working","readOnly","getTime","date","to","startTime","minusFormat","from","endTime","p","alignItems","display","flexDirection","mb","width","bgcolor","status","borderRadius","ml","moment","format","mr","className","RouteList","consultationSchedule","control","checked","onChange","sessionWorking","updateWorkingTime","rs","newWorkingTime","indexOfScheduleUpdate","findIndex","value","length","name","label","ModelStatus","onClick","hash","consultationCreate","variant","type","onCurrentDateChange","flexibleSpaceComponent","flex","key","toString","startDayHour","endDayHour","mainResourceName","onAppointmentMetaChange","console","log","contentComponent","shadePreviousCells","shadePreviousAppointments","updateInterval"],"mappings":"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","file":"static/js/16.65e3ac8c.chunk.js","sourcesContent":["import { useLoaderActions } from \"../loader\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport function useApi<R>(query: () => Promise<R>, deps: any[] = []) {\n  const loader = useLoaderActions();\n  const [state, setState] = useState<R | undefined>();\n  query = useCallback(query, deps);\n  useEffect(() => {\n    loader.push(query().then(setState));\n  }, [loader, query]);\n  return state;\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    paddingTop: theme.spacing(2),\n    background: theme.palette.common.white,\n    height: \"100%\",\n  },\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n  },\n}));\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\n\nimport {\n  Paper,\n  Box,\n  FormControlLabel,\n  Switch,\n  useTheme,\n  Button,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { doctor as repoDoctor } from \"services/repos\";\nimport { useApi } from \"stores/UseApi/useApi\";\nimport useAuthentication from \"stores/authenticationsStore/authentication\";\nimport { WorkingTime } from \"models/workingTime\";\nimport {\n  Scheduler,\n  WeekView,\n  Appointments,\n  DateNavigator,\n  TodayButton,\n  Toolbar,\n  AppointmentTooltip,\n  CurrentTimeIndicator,\n  Resources,\n} from \"@devexpress/dx-react-scheduler-material-ui\";\n\nimport { ViewState } from \"@devexpress/dx-react-scheduler\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport { AccountStatus, ModelStatus } from \"models\";\nimport AssignmentIndIcon from \"@material-ui/icons/AssignmentInd\";\nimport { RouteList } from \"routeList\";\nimport { useStyles } from \"./style\";\n\ninterface IMapped {\n  startDay: number;\n  endDay: number;\n  schedules: any[];\n}\n\nconst SchedulesConsultationPage: React.FC = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const history = useHistory();\n\n  const resourcesData = [\n    {\n      text: \"Active\",\n      id: AccountStatus.ACTIVE,\n      color: theme.palette.success.main,\n    },\n    {\n      text: \"Inactive\",\n      id: AccountStatus.INACTIVE,\n      color: theme.palette.text.disabled,\n    },\n  ];\n  const [currentDate, setCurrentDate] = React.useState(() => new Date());\n  const [mapped, setMapped] = useState<IMapped>({\n    startDay: 8,\n    endDay: 18,\n    schedules: [],\n  });\n  const [state] = useAuthentication();\n  const [active, setActive] = useState(false);\n  const [data, setData] = useState<WorkingTime[]>();\n  const payload = {\n    doctorId: state.account.externalId,\n    offset: 0,\n    limit: 250,\n    // date: timeExpired,\n  };\n\n  const dataRs = useApi(() => repoDoctor.getConsultationWorkingTime(payload));\n  useEffect(() => {\n    dataRs && setData(dataRs.data);\n  }, [dataRs]);\n\n  useEffect(() => {\n    if (data) {\n      let startDay = 8;\n      let endDay = 18;\n\n      const schedules = WorkingTime.toSchedule(data || []).map((s) => {\n        const start = (s.startDate as Date).getHours();\n        const end = (s.endDate as Date).getHours() + 1;\n        if (startDay > start) startDay = start;\n        if (endDay < end) endDay = end;\n        return s;\n      });\n      setMapped({\n        startDay,\n        endDay,\n        schedules,\n      });\n    }\n  }, [data]);\n\n  const resources = [\n    {\n      fieldName: \"status\",\n      instances: resourcesData,\n    },\n  ];\n\n  const handlerChangeStatusSessions = (sessionWorking: WorkingTime) => {\n    setActive(!active);\n    repoDoctor.updateWorkingTime(sessionWorking).then((rs) => {\n      const newWorkingTime = data || [];\n      const indexOfScheduleUpdate = newWorkingTime.findIndex(\n        (value) => rs.id === value.id,\n      );\n      if (newWorkingTime?.length > 0 && indexOfScheduleUpdate !== -1) {\n        newWorkingTime[indexOfScheduleUpdate] = rs;\n        setData([...newWorkingTime]);\n      }\n    });\n  };\n\n  const handleAddConsultationWorkingTime = () => {\n    history.push({ hash: RouteList.consultationCreate });\n  };\n\n  const renderDetailSession = (props: any) => {\n    const workingTime: WorkingTime = props.appointmentData?.working;\n    const readOnly =\n      new Date().getTime() >\n      new Date(workingTime.date).getTime() + workingTime.to;\n    if (workingTime && !workingTime) return <></>;\n    const startTime = WorkingTime.minusFormat(workingTime.from || 0) || \"\";\n    const endTime = WorkingTime.minusFormat(workingTime.to || 0) || \"\";\n    return (\n      <Box p={2}>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\" mb={1}>\n          <Box\n            width=\"1.5em\"\n            height=\"1.5em\"\n            bgcolor={\n              workingTime.status === \"ACTIVE\" ? \"success.main\" : \"text.disabled\"\n            }\n            borderRadius=\"50%\"\n          />\n          <Box ml={1}>{moment(workingTime.date).format(\"DD MMMM YYYY\")}</Box>\n        </Box>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n          <Box mr={1}>\n            <AccessTimeIcon />\n          </Box>\n          <Box>\n            {startTime} - {endTime}\n          </Box>\n        </Box>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n          <Box mr={1}>\n            <AssignmentIndIcon />\n          </Box>\n          <Link\n            className={classes.link}\n            to={`${RouteList.consultationSchedule}?date=${workingTime.date}`}\n          >\n            Go to Consultation Schedule\n          </Link>\n        </Box>\n        <Box mb={2}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={active}\n                disabled={readOnly}\n                onChange={() => handlerChangeStatusSessions(workingTime)}\n                name=\"activeWorking\"\n                color=\"secondary\"\n              />\n            }\n            label={\n              workingTime.status === ModelStatus.ACTIVE ? \"Active\" : \"Inactive\"\n            }\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  return (\n    <Paper>\n      <Box display=\"flex\" alignItems=\"flex-end\">\n        <Button\n          onClick={handleAddConsultationWorkingTime}\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n        >\n          Tạo Lịch Tư Vấn\n        </Button>\n      </Box>\n      <Scheduler data={mapped.schedules}>\n        <ViewState\n          currentDate={currentDate}\n          onCurrentDateChange={setCurrentDate}\n        />\n\n        <Toolbar\n          flexibleSpaceComponent={() => (\n            <>\n              <Box flex={1} />\n            </>\n          )}\n        />\n        <WeekView\n          key={currentDate.toString()}\n          startDayHour={mapped.startDay}\n          endDayHour={mapped.endDay}\n        />\n        <DateNavigator />\n        <TodayButton />\n        <Appointments />\n        <Resources data={resources} mainResourceName=\"status\" />\n        <AppointmentTooltip\n          onAppointmentMetaChange={(props) => {\n            console.log(props.data);\n            const workingTime: WorkingTime = props.data?.appointmentData?.data;\n            setActive(workingTime?.status === ModelStatus.ACTIVE);\n          }}\n          contentComponent={(props) => renderDetailSession(props)}\n        />\n        <CurrentTimeIndicator\n          shadePreviousCells\n          shadePreviousAppointments\n          updateInterval={10000}\n        />\n      </Scheduler>\n    </Paper>\n  );\n};\n\nexport default SchedulesConsultationPage;\n"],"sourceRoot":""}