{"version":3,"sources":["components/Input/AcademicRank.tsx","components/Input/Gender.tsx","components/Input/Nation.tsx","components/Input/Nationality.tsx","components/Input/WorkPlace.tsx","components/Input/Diseases.tsx","components/Input/JobTitle.tsx","components/FormDoctor/base.tsx","components/FormDoctor/index.tsx","pages/Profile/edit.tsx"],"names":["AcademicRank","error","props","useI18n","academicLevel","config","academicRank","component","inputs","errors","InputLabel","label","Box","height","visibility","px","Select","name","color","placeholder","value","Object","entries","map","key","MenuItem","FormHelperText","Gender","gender","display","alignItems","justifyContent","FormLabel","pr","RadioGroup","FormControlLabel","control","Radio","size","style","textAlign","Nation","onChange","nations","nation","options","useMemo","Autocomplete","find","getOptionLabel","filterSelectedOptions","e","first","renderInput","params","TextField","variant","helperText","Nationality","nationality","WorkPlace","hospital","workplace","inValues","filter","includes","multiple","values","Diseases","diseases","JobTitle","jobTitle","listFields","AccountForm","children","touched","handleSubmit","handleChange","i18nForm","accountForm","onSubmit","Grid","container","spacing","touch","isError","field","firstName","lastName","phoneNumber","mapFieldToLangugage","FormControl","margin","item","xs","initialValue","Doctor","withFormik","mapPropsToValues","data","validate","list","createValidation","required","validations","requireString","createAccountValidation","a","setSubmitting","submit","displayName","validateForm","specialties","doctorForm","i18n","errorCode","undefined","md","row","genderCode","fullWidth","academicRankCode","nationCode","nationalityCode","diseasesConsultantCode","Boolean","option","specialtyType","renderSpecialtyTypeBox","TextareaAutosize","description","title","rowsMin","rowsMax","resize","Button","type","system","common","save","useStyles","makeStyles","theme","root","containerAvatar","padding","avatar","width","containerPage","background","palette","white","classes","useAuthentication","state","useState","datas","setDatas","useEffect","account","id","repoDoctor","single","doctor","repoSpecialties","querySpecialties","setUrlAvatar","ref","useRef","form","urlAvatar","fileSlectedHandler","event","uploadAvatar","target","files","dataImg","fileUrl","Container","className","Typography","pages","profileInfor","editInfor","encType","hidden","Avatar","src","onClick","current","click","editAvatar","infoDoctor","update"],"mappings":"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","file":"static/js/17.ada7b810.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  Select,\n  MenuItem,\n  SelectProps,\n  InputLabel,\n  Box,\n  FormHelperText,\n} from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const AcademicRank: React.FC<\n  Omit<SelectProps, \"error\"> & { error?: IValidError }\n> = ({ error, ...props }) => {\n  const {\n    config: { academicLevel },\n    component: {\n      inputs: { academicRank },\n    },\n  } = useI18n();\n\n  const { errors = {} } = academicRank;\n\n  return (\n    <>\n      <InputLabel error={!!error}>{academicRank.label}</InputLabel>\n      <Box height=\"0px\" visibility=\"hidden\" px={4}>\n        {academicRank.label}\n      </Box>\n      <Select\n        name=\"academicRank\"\n        color=\"primary\"\n        label={academicRank.label}\n        placeholder={academicRank.placeholder}\n        error={!!error}\n        {...props}\n        value={props.value || \"\"}\n      >\n        {Object.entries(academicLevel).map(([key, label]) => (\n          <MenuItem key={key} value={key}>\n            {label}\n          </MenuItem>\n        ))}\n      </Select>\n      {error && (\n        <FormHelperText error={!!error}>{errors[error]}</FormHelperText>\n      )}\n    </>\n  );\n};\n","import React from \"react\";\nimport {\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  RadioGroupProps,\n  FormHelperText,\n  FormLabel,\n  Box,\n} from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\n\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const Gender: React.FC<RadioGroupProps & { error?: IValidError }> = ({\n  error,\n  ...props\n}) => {\n  const {\n    config: { gender },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.gender;\n  return (\n    <>\n      <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\">\n        <FormLabel error={!!error}>{inputs.gender.label}</FormLabel>\n        <Box pr={2} />\n        <RadioGroup {...props}>\n          {Object.entries(gender).map(([key, label]) => (\n            <FormControlLabel\n              key={key}\n              value={key}\n              control={<Radio size=\"small\" />}\n              label={label}\n            />\n          ))}\n        </RadioGroup>\n      </Box>\n      {error && (\n        <FormHelperText error={!!error} style={{ textAlign: \"right\" }}>\n          {errors[error]}\n        </FormHelperText>\n      )}\n    </>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"../../stores/Locale/LocaleStore\";\n\nexport const Nation: React.FC<\n  Omit<TextFieldProps, \"onChange\" | \"error\"> & {\n    onChange: (value?: string) => void;\n    error?: IValidError;\n  }\n> = ({ onChange, error, ...props }) => {\n  const {\n    config: { nations },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.nation;\n\n  const options = useMemo(() => Object.entries(nations), [nations]);\n\n  return (\n    <Autocomplete\n      options={options}\n      value={options.find(([value]) => value === props.value) || null}\n      getOptionLabel={([, label]) => label}\n      filterSelectedOptions\n      onChange={(e, value) => onChange(value?.first)}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          size=\"small\"\n          variant=\"outlined\"\n          label={inputs.nation.label}\n          error={!!error}\n          helperText={error ? errors[error] : \"\"}\n          {...props}\n        />\n      )}\n    />\n  );\n};\n","import React, { useMemo } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, InputProps } from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const Nationality: React.FC<\n  Omit<InputProps, \"onChange\" | \"error\"> & {\n    onChange: (value?: string) => void;\n    error?: IValidError;\n  }\n> = ({ ...props }) => {\n  const {\n    config: { nationality },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.nationality;\n\n  const options = useMemo(() => Object.entries(nationality), [nationality]);\n\n  return (\n    <Autocomplete\n      options={options}\n      value={options.find(([value]) => value === props.value) || null}\n      getOptionLabel={([, label]) => label}\n      filterSelectedOptions\n      onChange={(e, value) => props.onChange(value?.first)}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          size=\"small\"\n          variant=\"outlined\"\n          label={inputs.nationality.label}\n          error={!!props.error}\n          helperText={props.error ? errors[props.error] : \"\"}\n        />\n      )}\n    />\n  );\n};\n","import React, { useMemo } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, InputProps } from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const WorkPlace = (\n  props: Omit<InputProps, \"onChange\" | \"error\" | \"value\"> & {\n    onChange: (value?: string[]) => void;\n    error?: IValidError;\n    value: string[];\n  },\n) => {\n  const {\n    config: { hospital },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.workplace;\n\n  const options = useMemo(() => Object.entries(hospital), [hospital]);\n  const inValues = useMemo(\n    () =>\n      options.filter(([value]) =>\n        props.value ? props.value.includes(value) : null,\n      ),\n    [options, props.value],\n  );\n\n  return (\n    <Autocomplete\n      options={options}\n      value={inValues}\n      getOptionLabel={([, label]) => label}\n      filterSelectedOptions\n      multiple\n      onChange={(e, values) => props.onChange(values?.map(([value]) => value))}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          size=\"small\"\n          variant=\"outlined\"\n          label={inputs.workplace.label}\n          error={!!props.error}\n          helperText={props.error ? errors[props.error] : \"\"}\n        />\n      )}\n    />\n  );\n};\n","import React, { useMemo } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, InputProps } from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const Diseases = (\n  props: Omit<InputProps, \"onChange\" | \"error\" | \"value\"> & {\n    onChange: (value?: string[]) => void;\n    error?: IValidError;\n    value: string[];\n  },\n) => {\n  const {\n    config: { diseases },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.diseases;\n\n  const options = useMemo(() => Object.entries(diseases), [diseases]);\n\n  const inValues = useMemo(\n    () => options.filter(([value]) => props.value.includes(value)),\n    [options, props.value],\n  );\n\n  return (\n    <Autocomplete\n      options={options}\n      value={inValues}\n      getOptionLabel={([, label]) => label}\n      filterSelectedOptions\n      multiple\n      onChange={(e, values) => props.onChange(values?.map(([value]) => value))}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          size=\"small\"\n          variant=\"outlined\"\n          label={inputs.diseases.label}\n          error={!!props.error}\n          helperText={props.error ? errors[props.error] : \"\"}\n        />\n      )}\n    />\n  );\n};\n","import React, { useMemo } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\nimport { IValidError } from \"utils\";\nimport { useI18n } from \"stores/Locale/LocaleStore\";\n\nexport const JobTitle = ({\n  onChange,\n  error,\n  ...props\n}: Omit<TextFieldProps, \"onChange\" | \"error\"> & {\n  onChange: (value?: string) => void;\n  error?: IValidError;\n}) => {\n  const {\n    config: { jobTitle },\n    component: { inputs },\n  } = useI18n();\n  const { errors = {} } = inputs.jobTitle;\n\n  const options = useMemo(() => Object.entries(jobTitle), [jobTitle]);\n\n  return (\n    <Autocomplete\n      options={options}\n      value={options.find(([value]) => value === props.value) ?? null}\n      getOptionLabel={([, label]) => label}\n      filterSelectedOptions\n      onChange={(e, value) => onChange(value?.first)}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          size=\"small\"\n          variant=\"outlined\"\n          label={inputs.jobTitle.label}\n          error={!!error}\n          helperText={error ? errors[error] : \"\"}\n          {...props}\n        />\n      )}\n    />\n  );\n};\n","import React, { Props } from \"react\";\nimport { FormikProps } from \"formik\";\nimport { FormControl, TextField, Grid } from \"@material-ui/core\";\nimport { Account, IAccount } from \"models\";\nimport {\n  IValidError,\n  createValidation,\n  IValidList,\n  validations,\n  I18nFormField\n} from \"utils\";\nimport {useI18n} from \"../../stores/Locale/LocaleStore\";\n\nconst listFields: (keyof IAccount)[] = [\"firstName\", \"lastName\", \"phoneNumber\"];\n\nexport default function AccountForm<T extends IAccount>(\n  props: FormikProps<T> & Props<any>,\n) {\n  const {\n    children,\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleChange,\n  } = props;\n\n  const {\n    component: { accountForm: i18nForm },\n  } = useI18n();\n\n  const mapFieldToLangugage = (field: string) =>{\n    switch (field) {\n      case 'firstName':\n        return i18nForm.firstName.label;\n      case 'lastName':\n        return i18nForm.lastName.label;\n      case 'phoneNumber':\n        return i18nForm.phoneNumber.label;\n      default:\n        return field\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Grid container spacing={2}>\n        {listFields.map((name) => {\n          const value = values[name];\n          const error = errors[name] as IValidError;\n          const touch = touched[name];\n          const isError = !!(error && touch);\n          const label = mapFieldToLangugage(name);\n\n          return (\n            <FormControl key={name} margin=\"dense\" component={Grid} item xs={6}>\n              <TextField\n                size=\"small\"\n                label={label}\n                placeholder={label}\n                variant=\"outlined\"\n                color={\"primary\"}\n                name={name}\n                value={value}\n                onChange={handleChange}\n                error={isError}\n                helperText={isError ? error : \"\"}\n              />\n            </FormControl>\n          );\n        })}\n      </Grid>\n      {children}\n    </form>\n  );\n}\n\nexport function createAccountValidation<T extends IAccount>(\n  list: IValidList<Omit<T, keyof Account>> = {},\n) {\n  return createValidation<T>({\n    firstName: { required: validations.requireString },\n    lastName: { required: validations.requireString },\n    // phoneNumber: { required: validations.requireString },\n    ...list,\n  });\n}\n","import React, { Props } from \"react\";\nimport { FormikBag, FormikProps, withFormik } from \"formik\";\nimport {\n  TextareaAutosize,\n  Grid,\n  FormControl,\n  TextField,\n  Button,\n} from \"@material-ui/core\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete/Autocomplete\";\nimport {\n  WorkPlace,\n  Gender,\n  AcademicRank,\n  Nation,\n  Nationality,\n  Diseases,\n  JobTitle,\n} from \"components/Input\";\nimport AccountForm, { createAccountValidation } from \"./base\";\nimport { Specialty, IDoctor, Doctor, Clinic } from \"models\";\nimport { IValidError } from \"utils\";\n\nimport { useI18n } from \"../../stores/Locale/LocaleStore\";\n\nexport interface IFormDoctorProps {\n  submit: (values: IDoctor) => Promise<void>;\n  clinics?: Clinic[];\n  specialties: Specialty[];\n  data?: IDoctor;\n  isEdit?: boolean;\n}\n\nconst InsideDoctorForm = (\n  props: FormikProps<IDoctor> & IFormDoctorProps & Props<any>,\n) => {\n  const {\n    children,\n    handleChange,\n    values,\n    errors,\n    touched,\n    validateForm,\n    specialties,\n  } = props;\n\n  const {\n    component: { doctorForm: i18nForm },\n  } = useI18n();\n\n  const i18n = useI18n();\n\n  const errorCode = (key: keyof IDoctor) => {\n    return touched[key] ? (errors[key] as IValidError) : undefined;\n  };\n\n  const renderSpecialtyTypeBox = () => {\n    const isError = Boolean(errors.specialties && touched.specialties);\n    return (\n      <Autocomplete\n        multiple\n        options={specialties}\n        value={values.specialties || []}\n        getOptionLabel={(option) => option.name || option.specialtyType}\n        filterSelectedOptions\n        onChange={(e, value: Specialty[]) => {\n          values.specialties = value;\n          validateForm(values);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            size=\"small\"\n            variant=\"outlined\"\n            label={i18nForm.specialties.label}\n            error={isError}\n            helperText={isError ? i18nForm.specialties.errors?.required : \"\"}\n          />\n        )}\n      />\n    );\n  };\n\n  return (\n    <>\n      <AccountForm {...props}>\n        <Grid container spacing={2}>\n          <FormControl margin=\"dense\" component={Grid} item md={6}>\n            <Gender\n              row\n              name=\"genderCode\"\n              value={values.genderCode || \"\"}\n              onChange={handleChange}\n              error={errorCode(\"genderCode\")}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"none\"\n            size=\"small\"\n            variant=\"outlined\"\n            fullWidth\n            component={Grid}\n            item\n            md={6}\n          >\n            <AcademicRank\n              name=\"academicRankCode\"\n              value={values.academicRankCode}\n              error={errorCode(\"academicRankCode\")}\n              onChange={handleChange}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"dense\"\n            size=\"small\"\n            variant=\"outlined\"\n            component={Grid}\n            item\n            xs={6}\n          >\n            <JobTitle\n              name=\"jobTitle\"\n              value={values.jobTitle}\n              error={errorCode(\"jobTitle\")}\n              onChange={(value) => {\n                values.jobTitle = value || \"\";\n                validateForm(values);\n              }}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"dense\"\n            size=\"small\"\n            variant=\"outlined\"\n            component={Grid}\n            item\n            md={6}\n          >\n            <Nation\n              name=\"nationCode\"\n              value={values.nationCode}\n              error={errorCode(\"nationCode\")}\n              onChange={(value) => {\n                values.nationCode = value;\n                validateForm(values);\n              }}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"dense\"\n            size=\"small\"\n            variant=\"outlined\"\n            component={Grid}\n            item\n            md={6}\n          >\n            <Nationality\n              name=\"nationalityCode\"\n              value={values.nationalityCode}\n              error={errorCode(\"nationalityCode\")}\n              onChange={(value: any) => {\n                values.nationalityCode = value;\n                validateForm(values);\n              }}\n            />\n          </FormControl>\n          <FormControl\n            margin=\"dense\"\n            size=\"small\"\n            variant=\"outlined\"\n            component={Grid}\n            item\n            xs={12}\n          >\n            <WorkPlace\n              name=\"workplace\"\n              value={values.workplace}\n              error={errorCode(\"workplace\")}\n              onChange={(value) => {\n                values.workplace = value || [];\n                validateForm(values);\n              }}\n            />\n          </FormControl>\n\n          <FormControl\n            margin=\"dense\"\n            size=\"small\"\n            variant=\"outlined\"\n            component={Grid}\n            item\n            xs={12}\n          >\n            <Diseases\n              name=\"diseasesConsultantCode\"\n              value={values.diseasesConsultantCode}\n              error={errorCode(\"diseasesConsultantCode\")}\n              onChange={(value) => {\n                values.diseasesConsultantCode = value || [];\n                validateForm(values);\n              }}\n            />\n          </FormControl>\n\n          <FormControl\n            variant=\"outlined\"\n            margin=\"dense\"\n            component={Grid}\n            item\n            xs={12}\n          >\n            {renderSpecialtyTypeBox()}\n          </FormControl>\n\n          <FormControl component={Grid} item md={12}>\n            <TextareaAutosize\n              value={values.description}\n              name=\"description\"\n              onChange={handleChange}\n              title=\"description\"\n              placeholder=\"description\"\n              rowsMin={3}\n              rowsMax={10}\n              style={{ resize: \"none\" }}\n            />\n          </FormControl>\n          <Grid item xs={12}>\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n              {i18n.system.common.save}\n            </Button>\n          </Grid>\n        </Grid>\n        {children}\n      </AccountForm>\n    </>\n  );\n};\nconst initialValue = new Doctor();\nexport default withFormik<IFormDoctorProps, IDoctor>({\n  mapPropsToValues: (props) => ({\n    ...initialValue,\n    ...props.data,\n  }),\n  validate: createAccountValidation<IDoctor>({\n    // genderCode: { required: Boolean },\n    // nationCode: { required: Boolean },\n    // nationalityCode: { required: Boolean },\n    // academicRankCode: { required: Boolean },\n    // specialties: { required: (list: any[]) => Boolean(list?.length) },\n  }),\n  handleSubmit: async (\n    values: IDoctor,\n    { props, setSubmitting }: FormikBag<IFormDoctorProps, IDoctor>,\n  ) => {\n    setSubmitting(true);\n    await props.submit(values);\n  },\n  displayName: \"DoctorForm\",\n})(InsideDoctorForm);\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Avatar, Button, Container, Typography } from \"@material-ui/core\";\n\nimport {\n  doctor as repoDoctor,\n  specialties as repoSpecialties,\n} from \"services/repos\";\nimport { Specialty, Doctor } from \"models\";\nimport DoctorForm from \"components/FormDoctor\";\nimport useAuthentication from \"../../stores/authenticationsStore/authentication\";\nimport {useI18n} from \"../../stores/Locale/LocaleStore\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  containerAvatar: {\n    padding: theme.spacing(1),\n  },\n  avatar: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n  containerPage:{\n    background: theme.palette.common.white,\n    width: \"600px\",\n    height: '100%',\n  }\n}));\n\ntype IQueryDatas = {\n  specialties: Specialty[];\n  data?: Doctor;\n};\n\nexport default () => {\n  const classes = useStyles();\n  const [state] = useAuthentication();\n  const [datas, setDatas] = useState<IQueryDatas>();\n  const i18n = useI18n();\n\n  useEffect(() => {\n    (async function getData() {\n      if (state?.account && state.account.id) {\n        const doctor = await repoDoctor.single(state?.account?.id);\n        const { data: specialties } = await repoSpecialties.querySpecialties();\n        setUrlAvatar(doctor.avatar || \"\");\n        setDatas({\n          specialties: specialties,\n          data: doctor,\n        });\n      }\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state?.account?.id]);\n\n  const ref = useRef<HTMLInputElement>(null);\n  const form = useRef<HTMLFormElement>(null);\n\n  const [urlAvatar, setUrlAvatar] = useState(\"\");\n\n  const fileSlectedHandler = async (event: any) => {\n    const dataImg = await repoDoctor.uploadAvatar(\n      event.target.files[0],\n      event.target.files[0].name,\n    );\n    setUrlAvatar(dataImg.fileUrl);\n  };\n\n  return (\n    <Container className={classes.containerPage} component=\"div\">\n      <Typography color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n        {i18n.pages.profileInfor.editInfor}\n      </Typography>\n      <div>\n        <div className={classes.containerAvatar}>\n          <form encType=\"multipart/form-data\" ref={form}>\n            <input ref={ref} hidden type=\"file\" onChange={fileSlectedHandler} />\n          </form>\n          <Avatar className={classes.avatar} src={urlAvatar} />\n        </div>\n        <div>\n          <Button\n            onClick={() => ref.current?.click()}\n            size=\"small\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            {i18n.pages.profileInfor.editAvatar}\n          </Button>\n        </div>\n      </div>\n      <Typography color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n        {i18n.pages.profileInfor.infoDoctor}\n      </Typography>\n      {datas && (\n        <DoctorForm\n          submit={async (values) => {\n            values.avatar = urlAvatar;\n            state && (await repoDoctor.update(state.account.id, values));\n          }}\n          {...datas}\n        />\n      )}\n    </Container>\n  );\n};\n"],"sourceRoot":""}