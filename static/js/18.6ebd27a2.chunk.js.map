{"version":3,"sources":["stores/UseApi/useApi.ts","pages/Schedules/index.tsx"],"names":["useApi","query","deps","loader","useLoaderActions","useState","state","setState","useCallback","useEffect","push","then","useStyles","makeStyles","theme","link","textDecoration","color","palette","primary","main","SchedulesPage","useTheme","classes","search","useLocation","replace","resourcesData","text","id","AccountStatus","ACTIVE","success","INACTIVE","disabled","React","Date","currentDate","setCurrentDate","startDay","endDay","schedules","mapped","setMapped","useAuthentication","active","setActive","data","setData","history","useHistory","bookingId","get","parse","payload","doctorId","account","externalId","offset","limit","dataRs","repoDoctor","getWorkingTime","WorkingTime","toSchedule","map","s","start","startDate","getHours","end","endDate","resources","fieldName","instances","renderDetailSession","props","workingTime","appointmentData","working","readOnly","getTime","date","to","startTime","minusFormat","from","endTime","p","alignItems","display","flexDirection","mb","width","height","bgcolor","status","borderRadius","ml","moment","format","mr","className","RouteList","consultationSchedule","control","checked","onChange","sessionWorking","updateWorkingTime","rs","newWorkingTime","indexOfScheduleUpdate","findIndex","value","length","name","label","ModelStatus","onClick","hash","ReExamintionBooking","handleReExmination","onCurrentDateChange","flexibleSpaceComponent","flex","key","toString","startDayHour","endDayHour","mainResourceName","onAppointmentMetaChange","contentComponent","shadePreviousCells","shadePreviousAppointments","updateInterval"],"mappings":"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","file":"static/js/18.6ebd27a2.chunk.js","sourcesContent":["import { useLoaderActions } from \"../loader\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport function useApi<R>(query: () => Promise<R>, deps: any[] = []) {\n  const loader = useLoaderActions();\n  const [state, setState] = useState<R | undefined>();\n  query = useCallback(query, deps);\n  useEffect(() => {\n    loader.push(query().then(setState));\n  }, [loader, query]);\n  return state;\n}\n","import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\n\nimport {\n  Paper,\n  Box,\n  FormControlLabel,\n  Switch,\n  useTheme,\n  Theme,\n  makeStyles,\n  Button,\n} from \"@material-ui/core\";\nimport moment from \"moment\";\nimport { doctor as repoDoctor } from \"services/repos\";\nimport { useApi } from \"../../stores/UseApi/useApi\";\nimport useAuthentication from \"stores/authenticationsStore/authentication\";\nimport { WorkingTime } from \"models/workingTime\";\nimport {\n  Scheduler,\n  WeekView,\n  Appointments,\n  DateNavigator,\n  TodayButton,\n  Toolbar,\n  AppointmentTooltip,\n  CurrentTimeIndicator,\n  Resources,\n} from \"@devexpress/dx-react-scheduler-material-ui\";\n\nimport { ViewState } from \"@devexpress/dx-react-scheduler\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport { AccountStatus, ModelStatus } from \"../../models\";\nimport AssignmentIndIcon from \"@material-ui/icons/AssignmentInd\";\nimport { RouteList } from \"../../routeList\";\nimport { Booking } from \"../../models/booking\";\nimport get from \"lodash/get\";\nimport { parse } from \"querystring\";\n\ninterface IMapped {\n  startDay: number;\n  endDay: number;\n  schedules: any[];\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n  },\n}));\n\nconst SchedulesPage: React.FC = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const location = useLocation();\n  const search = location.search.replace(\"?\", \"\");\n  const resourcesData = [\n    {\n      text: \"Active\",\n      id: AccountStatus.ACTIVE,\n      color: theme.palette.success.main,\n    },\n    {\n      text: \"Inactive\",\n      id: AccountStatus.INACTIVE,\n      color: theme.palette.text.disabled,\n    },\n  ];\n  const [currentDate, setCurrentDate] = React.useState(() => new Date());\n  const [mapped, setMapped] = useState<IMapped>({\n    startDay: 8,\n    endDay: 18,\n    schedules: [],\n  });\n  const [state] = useAuthentication();\n  const [active, setActive] = useState(false);\n  const [data, setData] = useState<WorkingTime[]>();\n  const history = useHistory();\n  const bookingId = get(parse(search), \"bookingId\", \"\") as string;\n  const payload = {\n    doctorId: state.account.externalId,\n    offset: 0,\n    limit: 50,\n    // date: timeExpired,\n  };\n\n  const dataRs = useApi(() => repoDoctor.getWorkingTime(payload));\n  useEffect(() => {\n    dataRs && setData(dataRs.data);\n  }, [dataRs]);\n\n  const handleReExmination = (workingTime: WorkingTime) => {\n    history.push({\n      hash: RouteList.ReExamintionBooking,\n      search: `?bookingId=${bookingId}`,\n      state: {\n        workingTime,\n      },\n    });\n  };\n\n  useEffect(() => {\n    if (data) {\n      let startDay = 8;\n      let endDay = 18;\n\n      const schedules = WorkingTime.toSchedule(data || []).map((s) => {\n        const start = (s.startDate as Date).getHours();\n        const end = (s.endDate as Date).getHours() + 1;\n        if (startDay > start) startDay = start;\n        if (endDay < end) endDay = end;\n        return s;\n      });\n      setMapped({\n        startDay,\n        endDay,\n        schedules,\n      });\n    }\n  }, [data]);\n\n  const resources = [\n    {\n      fieldName: \"status\",\n      instances: resourcesData,\n    },\n  ];\n\n  const handlerChangeStatusSessions = (sessionWorking: WorkingTime) => {\n    setActive(!active);\n    repoDoctor.updateWorkingTime(sessionWorking).then((rs) => {\n      const newWorkingTime = data || [];\n      const indexOfScheduleUpdate = newWorkingTime.findIndex(\n        (value) => rs.id === value.id,\n      );\n      if (newWorkingTime?.length > 0 && indexOfScheduleUpdate !== -1) {\n        newWorkingTime[indexOfScheduleUpdate] = rs;\n        setData([...newWorkingTime]);\n      }\n    });\n  };\n\n  const renderDetailSession = (props: any) => {\n    const workingTime: WorkingTime = props.appointmentData?.working;\n    const readOnly =\n      new Date().getTime() >\n      new Date(workingTime.date).getTime() + workingTime.to;\n    if (workingTime && !workingTime) return <></>;\n    const startTime = WorkingTime.minusFormat(workingTime.from || 0) || \"\";\n    const endTime = WorkingTime.minusFormat(workingTime.to || 0) || \"\";\n    return (\n      <Box p={2}>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\" mb={1}>\n          <Box\n            width=\"1.5em\"\n            height=\"1.5em\"\n            bgcolor={\n              workingTime.status === \"ACTIVE\" ? \"success.main\" : \"text.disabled\"\n            }\n            borderRadius=\"50%\"\n          />\n          <Box ml={1}>{moment(workingTime.date).format(\"DD MMMM YYYY\")}</Box>\n        </Box>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n          <Box mr={1}>\n            <AccessTimeIcon />\n          </Box>\n          <Box>\n            {startTime} - {endTime}\n          </Box>\n        </Box>\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n          <Box mr={1}>\n            <AssignmentIndIcon />\n          </Box>\n          <Link\n            className={classes.link}\n            to={`${RouteList.consultationSchedule}?date=${workingTime.date}`}\n          >\n            Go to Consultation Schedule\n          </Link>\n        </Box>\n        <Box mb={2}>\n          <FormControlLabel\n            control={\n              <Switch\n                checked={active}\n                disabled={readOnly}\n                onChange={() => handlerChangeStatusSessions(workingTime)}\n                name=\"activeWorking\"\n                color=\"secondary\"\n              />\n            }\n            label={\n              workingTime.status === ModelStatus.ACTIVE ? \"Active\" : \"Inactive\"\n            }\n          />\n        </Box>\n        {bookingId && (\n          <Box>\n            <Button onClick={() => handleReExmination(workingTime)}>\n              <Box ml={1}>\n                <Box>Tái Khám</Box>\n              </Box>\n            </Button>\n          </Box>\n        )}\n      </Box>\n    );\n  };\n\n  return (\n    <Paper>\n      <Scheduler data={mapped.schedules}>\n        <ViewState\n          currentDate={currentDate}\n          onCurrentDateChange={setCurrentDate}\n        />\n\n        <Toolbar\n          flexibleSpaceComponent={() => (\n            <>\n              <Box flex={1} />\n            </>\n          )}\n        />\n        <WeekView\n          key={currentDate.toString()}\n          startDayHour={mapped.startDay}\n          endDayHour={mapped.endDay}\n        />\n        <DateNavigator />\n        <TodayButton />\n        <Appointments />\n        <Resources data={resources} mainResourceName=\"status\" />\n        <AppointmentTooltip\n          onAppointmentMetaChange={(props) => {\n            const workingTime: WorkingTime = props.data?.appointmentData?.data;\n            setActive(workingTime?.status === ModelStatus.ACTIVE);\n          }}\n          contentComponent={(props) => renderDetailSession(props)}\n        />\n        <CurrentTimeIndicator\n          shadePreviousCells\n          shadePreviousAppointments\n          updateInterval={10000}\n        />\n      </Scheduler>\n    </Paper>\n  );\n};\n\nexport default SchedulesPage;\n"],"sourceRoot":""}